#include "cache.h"
#include "ooo_cpu.h"

// JDM: Replicamos las llamadas que hacía la versión del CRC2
void InitReplacementState(),
     UpdateReplacementState(uint32_t cpu, uint32_t set, uint32_t way, uint64_t paddr, uint64_t PC, uint64_t victim_addr, uint32_t type, uint8_t hit),
     PrintStats_Heartbeat(),
     PrintStats();

uint32_t GetVictimInSet(uint32_t cpu, uint32_t set, const BLOCK *current_set, uint64_t PC, uint64_t paddr, uint32_t type);

uint64_t get_cycle_count() {
	return current_core_cycle[0];
}

uint64_t get_instr_count(uint32_t cpu) {

	assert(cpu<NUM_CPUS);

	return ooo_cpu[cpu].instr_unique_id;
}

uint64_t get_config_number() {
	return CRC2_CONFIG;
}

bool is_block_in_L2(uint32_t cpu, uint64_t full_addr)
{
	PACKET tmp_packet;
	tmp_packet.cpu = cpu;
	tmp_packet.address = full_addr >> LOG2_BLOCK_SIZE;
	tmp_packet.full_addr = full_addr;
	
	int way = ooo_cpu[cpu].L2C.check_hit(&tmp_packet);
	if (way == -1)
		return false;
	else
		return true;
}
		 
// initialize replacement state
void CACHE::llc_initialize_replacement()
{
	InitReplacementState();
}

// find replacement victim
uint32_t CACHE::llc_find_victim(uint32_t cpu, uint64_t instr_id, uint32_t set, const BLOCK *current_set, uint64_t ip, uint64_t full_addr, uint32_t type)
{
    
    return GetVictimInSet(cpu, set, current_set, ip, full_addr, type);
}

// called on every cache hit and cache fill
void CACHE::llc_update_replacement_state(uint32_t cpu, uint32_t set, uint32_t way, uint64_t full_addr, uint64_t ip, uint64_t victim_addr, uint32_t type, uint8_t hit)
{
    if ((type == WRITEBACK) && ip)
        assert(0);

	return UpdateReplacementState(cpu, set, way, full_addr, ip, victim_addr, type, hit);
}

void CACHE::llc_replacement_final_stats()
{
PrintStats();
}

void CACHE::llc_replacement_heartbeat_stats()
{
PrintStats_Heartbeat();
}
